<!doctype html>
<%_ /*
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons
    naming 3.0 unported license.
    See https://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/ _%>
<html lang="en">
    <!--region head-->
    <head>
        <meta charset="utf-8">
        <!--Prevent browser caching-->
        <meta http-equiv="cache-control" content="no-cache">
        <meta http-equiv="expires" content="0">
        <meta http-equiv="pragma" content="no-cache">
        <title>playground</title>
        <!--region style-->
        <link rel="stylesheet" href="/react-input-material/dist/index.css">
        <link rel="stylesheet" href="/@material/slider/dist/mdc.slider.css">
        <!--region tabs-->
        <link rel="stylesheet" href="/@material/tab-bar/dist/mdc.tab-bar.css">
        <link rel="stylesheet" href="/@material/tab/dist/mdc.tab.css">
        <link rel="stylesheet" href="/@material/tab-scroller/dist/mdc.tab-scroller.css">
        <link rel="stylesheet" href="/@material/tab-indicator/dist/mdc.tab-indicator.css">
        <link rel="stylesheet" href="/@material/ripple/dist/mdc.ripple.css">
        <!--endregion-->
        <style>
            .tab-bar {
                position: fixed;
                top: 0;
                left: 0;
                z-index: 1;

                width: 100%;

                background-color: white;
                box-shadow: 0 8px 11px -2px rgba(0, 0, 0, .2);

                .mdc-tab-bar {
                    display: flex;
                }
            }

            .playground {
                display: flex;
                flex-direction: row;
                gap: 20px;
                margin-top: 70px;

                .playground__tab.hide {
                    display: none;
                }

                .playground__inputs {
                    flex-grow: 1;
                }

                .playground__outputs__bar {
                    visibility: hidden;
                }

                .playground__outputs__content {
                    overflow: auto;
                    position: fixed;
                    top: 70px;
                    height: calc(100vh - 70px);
                    z-index: 1;
                }

                .playground__inputs__generic-animate .generic-animate-appear-active,
                .playground__inputs__generic-animate .generic-animate-enter-active,
                .playground__inputs__generic-animate .generic-animate-exit-active {
                    transition: opacity 2000ms ease-in !important;
                }
            }

            file-input,
            text-input,
            generic-inputs,
            generic-interval,
            slider-input {
                display: block;
                width: 400px;
            }

            file-input,
            text-input {
                margin-bottom: 20px;
            }

            generic-inputs {
                margin-bottom: 60px;
            }

            <%-
                require('material-icons/iconfont/material-icons.css')
                    .replace(
                        /(url\()"?(?:\.\/)?(material-icons\.[^.")]+)"?(\))/g,
                        '$1material-icons/iconfont/$2$3'
                    )
            %>
        </style>
        <!--endregion-->
        <!--region polyfill-->
        <%-
            include(
                'web-component-wrapper/polyfill.html',
                {additionalFeatures: [
                    /*
                        Most polyfills are determined via
                        "create-polyfill-service-url" subracted by already
                        includes one due to "web-component-wrapper".
                    */
                    // Asynchronous suggestion creator.
                    'AbortController',
                    'Array.prototype.every',
                    'Array.prototype.forEach',
                    'Array.prototype.indexOf',
                    'Array.prototype.lastIndexOf',
                    'Array.prototype.reduce',
                    'Array.prototype.some',
                    'Array.prototype.sort',
                    'Blob',
                    'Date.prototype.toISOString',
                    'globalThis',
                    'Intl',
                    'Object.create',
                    'Object.getOwnPropertyNames',
                    'Object.getPrototypeOf',
                    'Symbol.prototype.description'
                ]}
            )
        %>
        <!--endregion-->
        <!--region script-->
        <script>
            window.onload = function() {
                const {
                    makeArray,
                    represent,
                    timeout
                } = webInputMaterial.clientnode

                const TextInput =
                    webInputMaterial.index.components.TextInput.component
                        .content
                TextInput.locales.push('de-DE')
                TextInput.transformer.currency.format.final.options =
                    {currency: 'EUR'}

                webInputMaterial.index.register()

                const setOutputContent = function(content) {
                    for (const node of document.querySelectorAll(
                        '.playground__outputs pre'
                    ))
                        node.innerHTML = content
                }

                // region tabs
                const tabs = makeArray(document.querySelectorAll(
                    '.playground__tab'
                ))
                const tabBar =
                    document.querySelector('.playground__inputs__tab-bar')
                const showTab = function(currentIndex) {
                    tabBar.activeTabIndex = currentIndex
                    tabs.forEach(function(tab) {
                        if (tab === tabs[currentIndex]) {
                            if (tab.getAttribute('class').includes(' hide'))
                                tab.setAttribute(
                                    'class',
                                    tab.getAttribute('class')
                                        .replace(' hide', '')
                                )
                        } else if (
                            !tab.getAttribute('class').includes(' hide')
                        )
                            tab.setAttribute(
                                'class', tab.getAttribute('class') + ' hide'
                            )
                    })
                }
                tabBar.addEventListener(
                    'activate',
                    function(event) {
                        // NOTE: "event.detail" is sometimes set to "0" in IE11.
                        if (event.detail && event.detail.parameters[0].detail)
                            showTab(event.detail.parameters[0].detail.index)

                        setOutputContent('')
                    }
                )
                // endregion
                // region inputs
                // NOTE: Wait until all inputs have stabilized.
                timeout(function() {
                    makeArray(document.querySelectorAll('[is-root][name]'))
                        .forEach(function(domNode) {
                            domNode.addEventListener(
                                'change',
                                function(event) {
                                    if (event.target === domNode)
                                        timeout(function() {
                                            const content = represent(
                                                event.detail.parameters[0]
                                                    .model ||
                                                event.detail.parameters[0]
                                            )
                                            setOutputContent(content)
                                        })
                                }
                            )
                        })
                })
                // endregion
                // region animation
                const animationDomNodes = makeArray(
                    document.querySelectorAll('generic-animate')
                )
                let intervalID = null
                tabBar.addEventListener(
                    'activate',
                    function(event) {
                        /*
                            NOTE: "event.detail" is sometimes set to "0" in
                            IE11.
                        */
                        if (!event.detail)
                            return

                        if (
                            event.detail.parameters[0].detail &&
                            tabs[event.detail.parameters[0].detail.index]
                                .getAttribute('class')
                                .includes('generic-animate')
                        ) {
                            if (intervalID !== null) {
                                clearInterval(intervalID)
                                intervalID = null
                            }

                            intervalID = setInterval(
                                function () {
                                    animationDomNodes.forEach(
                                        function (domNode) {
                                            domNode.in = !domNode.in
                                        }
                                    )
                                },
                                2 * 1000
                            )
                        }
                    }
                )
                // endregion
            }
        </script>
        <!--endregion-->
    </head>
    <!--endregion-->
    <body class="no-javascript">
        <div class="tab-bar">
            <!--region navigation-->
            <tab-bar active-tab-index="0" class="playground__inputs__tab-bar">
                <tab-item>simple-input</tab-item>
                <tab-item>number-input</tab-item>
                <tab-item>text-input (with <sup>markup</sup>)</tab-item>
                <tab-item>time-input</tab-item>
                <tab-item>selection-input</tab-item>

                <tab-item>file-input</tab-item>

                <tab-item>generic-inputs</tab-item>
                <tab-item>generic-interval</tab-item>

                <tab-item>requireable-checkbox</tab-item>

                <tab-item>generic-animate</tab-item>

                <tab-item>circular-spinner</tab-item>

                <tab-item>slider-input</tab-item>
            </tab-bar>
            <!--endregion-->
        </div>
        <div class="playground">
            <div class="playground__inputs">
                <!--region simple-input-->
                <div class="playground__inputs__simple-input playground__tab">
                    <text-input
                        name="simpleInput1"
                        bind-on-keydown="console.info('Typed key:', event.key)"
                        input-properties="{outlined: true}"
                        trigger-initial-properties-consolidation
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="This text can be seen initially."
                        input-props="{
                            ariaChecked: false,
                            ariaDescription: 'test'
                        }"
                        name="simpleInput2"
                        show-declaration
                    ></text-input>
                    <text-input model="{name: 'simpleInput2Model'}">
                    </text-input>

                    <hr/>

                    <text-input
                        declaration="Disabled"
                        disabled
                        initial-value="'value2'"
                        name="simpleInput3"
                    ></text-input>
                    <text-input
                        model="{
                            declaration: 'Disabled',
                            default: 'value3Model',
                            mutable: false,
                            name: 'simpleInput3Model'
                        }"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="placeholder"
                        name="simpleInput4"
                        placeholder="simpleInput4"
                        required
                        show-validation-state="false"
                        trailing-icon="'clear_preset'"
                    ></text-input>
                    <text-input
                        default="'simpleInputValue4Model'"
                        icon="'backup'"
                        initial-value="'simpleInputValue4Model'"
                        model="{
                            declaration: 'placeholder',
                            name: 'simpleInput4Model',
                            nullable: false
                        }"
                        placeholder="simpleInput4Model"
                        trailing-icon="'clear_preset'"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="pattern"
                        description="simpleInput5Description"
                        icon="'search'"
                        initial-value="'only a`s allowed'"
                        name="simpleInput5"
                        pattern="'^a+$'"
                        placeholder="simpleInput5Placeholder"
                    ></text-input>
                    <text-input
                        initial-value="'has a`s and b`s'"
                        model="{
                            declaration: 'pattern',
                            description: 'simpleInput5ModelDescription',
                            pattern: ['.*a+.*', /.*b+.*/]
                        }"
                        name="simpleInput5Model"
                        placeholder="simpleInput5ModelPlaceholder"
                        trailing-icon="'search'"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="password"
                        description="simpleInput6Description"
                        icon="'search'"
                        initial-value="'hans'"
                        name="simpleInput6"
                        pattern="/a+/"
                        placeholder="simpleInput6Placeholder"
                        tooltip="'Please type in your password.'"
                        trailing-icon="'password_preset'"
                    ></text-input>
                    <text-input
                        initial-value="'hans'"
                        model="{
                            declaration: 'password',
                            description: 'simpleInput6ModelDescription',
                            pattern: 'a+'
                        }"
                        name="simpleInput6Model"
                        placeholder="simpleInput6ModelPlaceholder"
                        trailing-icon="'password_preset'"
                    ></text-input>
                </div>
                <!--endregion-->
                <!--region number-input-->
                <div class="playground__inputs__number-input playground__tab">
                    <text-input
                        declaration="Number"
                        description="numberInput1Description"
                        maximum="200000"
                        minimum="10"
                        name="numberInput1"
                        placeholder="100000"
                        required
                        type="number"
                    ></text-input>
                    <text-input
                        initial-value="100000"
                        model="{
                            declaration: 'Number',
                            description: 'numberInput1ModelDescription',
                            maximum: 200000,
                            minimum: 10,
                            mutable: false,
                            name: 'numberInput1Model',
                            nullable: false
                        }"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="Number"
                        description="numberInput2Description"
                        maximum="200000"
                        minimum="10"
                        minimumText="Please at least ${formatValue(minimum)}."
                        name="numberInput2"
                        placeholder="100.000"
                        required
                        type="integer"
                    ></text-input>
                    <text-input
                        initial-value="100000.01"
                        model="{
                            declaration: 'Number',
                            description: 'numberInput2ModelDescription',
                            maximum: 200000,
                            name: 'numberInput2Model',
                            nullable: false,
                            type: 'float'
                        }"
                        transformer="{format: {final: {options: {
                            maximumFractionDigits: 20,
                            minimumFractionDigits: 2
                        }}}}"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="Number"
                        description="numberInput3Description"
                        maximum="200000"
                        minimum="10"
                        name="numberInput3"
                        placeholder="100.000"
                        required
                        type="currency"
                    ></text-input>
                    <text-input
                        initial-value="100000.01"
                        model="{
                            declaration: 'Number',
                            description: 'numberInput3ModelDescription',
                            maximum: 200000,
                            minimum: 10,
                            name: 'numberInput3Model',
                            nullable: false,
                            type: 'currency'
                        }"
                    ></text-input>
                </div>
                <!--endregion-->
                <!--region text-input-->
                <div class="playground__inputs__text-input playground__tab">
                    <text-input
                        declaration="text"
                        description="textInput1Description"
                        initial-value="'a'"
                        name="textInput1"
                        required
                        rows="3"
                        theme-configuration="{primary: 'yellow', secondary: 'blue'}"
                    ></text-input>
                    <text-input
                        editor="text"
                        initial-value="'a'"
                        model="{
                            declaration: 'text',
                            description: 'textInput1ModelDescription',
                            name: 'textInput1Model',
                            nullable: false
                        }"
                        rows="2"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="code"
                        description="textInput2Description"
                        disabled
                        editor="code"
                        initial-value="'const value = 2'"
                        name="textInput2"
                        rows="2"
                        selectable-editor
                    ></text-input>
                    <text-input
                        editor="code"
                        initial-value="'const value = 2'"
                        model="{
                            declaration: 'code',
                            description: 'textInput2ModelDescription',
                            name: 'textInput2Model',
                            nullable: false
                        }"
                        rows="6"
                        selectable-editor
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="code"
                        description="textInput3Description"
                        editor="code"
                        maximum-length="10"
                        name="textInput3"
                        required
                        rows="2"
                        selectable-editor
                    ></text-input>
                    <text-input
                        editor="code"
                        model="{
                            declaration: 'code',
                            description: 'textInput3ModelDescription',
                            name: 'textInput3Model',
                            nullable: false
                        }"
                        rows="6"
                        selectable-editor
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="richtext(raw)"
                        description="textInput4Description"
                        editor="richtext(raw)"
                        initial-value="'Hello Mr. Smith,<br><br>how are you?'"
                        name="textInput4"
                        required
                        rows="2"
                        selectable-editor
                    ></text-input>
                    <text-input
                        editor="richtext(simple)"
                        initial-value="'Hello Mr. Smith,<br><br>how are you?'"
                        model="{
                            declaration: 'richtext(simple)',
                            description: 'textInput4ModelDescription',
                            mutable: false,
                            name: 'textInput4Model',
                            nullable: false
                        }"
                        rows="6"
                        selectable-editor
                    ></text-input>
                </div>
                <!--endregion-->
                <!--region time-input-->
                <div class="playground__inputs__time-input playground__tab">
                    <text-input
                        default="new Date('2025-01-01T00:00:00.000Z').getTime() / 1000"
                        name="timeInput1"
                        type="date"
                    ></text-input>
                    <text-input
                        initial-value="'2025-01-01T00:00:00.000Z'"
                        input-properties="{outlined: true}"
                        model="{name: 'timeInput1Model', type: 'date'}"
                    ></text-input>

                    <hr/>

                    <text-input
                        default="new Date('2025-01-01T23:00:00.000Z').getTime() / 1000"
                        name="timeInput2"
                        type="date-local"
                    ></text-input>
                    <text-input
                        initial-value="'2025-01-01T23:00:00.000Z'"
                        input-properties="{outlined: true}"
                        model="{name: 'timeInput2Model', type: 'date-local'}"
                    ></text-input>

                    <hr/>

                    <text-input
                        default="120" name="timeInput3" type="datetime"
                    ></text-input>
                    <text-input
                        model="{
                            default: new Date(120 * 1000),
                            maximum: 3600,
                            minimum: 60,
                            name: 'timeInput3Model',
                            type: 'datetime'
                        }"
                    ></text-input>

                    <hr/>

                    <text-input
                        default="120" name="timeInput4" type="datetime-local"
                    ></text-input>
                    <text-input
                        model="{
                            default: new Date(120 * 1000),
                            maximum: 3600,
                            minimum: 60,
                            name: 'timeInput4Model',
                            type: 'datetime-local'
                        }"
                    ></text-input>

                    <hr/>

                    <text-input default="120" name="timeInput5" type="time">
                    </text-input>
                    <text-input
                        model="{
                            default: new Date(60 * 1000),
                            maximum: 3600,
                            minimum: 60,
                            name: 'timeInput5Model',
                            type: 'time'
                        }"
                    ></text-input>

                    <hr/>

                    <text-input
                        default="120" name="timeInput6" type="time-local"
                    ></text-input>
                    <text-input
                        model="{
                            default: new Date(60 * 1000),
                            maximum: 3600,
                            minimum: 60,
                            name: 'timeInput6Model',
                            type: 'time-local'
                        }"
                    ></text-input>

                    <hr/>

                    <text-input
                        default="'00:20:00'"
                        name="timeInput7"
                        type="time-local"
                        step="60"
                    ></text-input>
                    <text-input
                        initial-value="'1970-01-01T00:20:00.000Z'"
                        input-properties="{outlined: true}"
                        model="{name: 'timeInput7Model', type: 'time-local'}"
                        step="60"
                    ></text-input>
                </div>
                <!--endregion-->
                <!--region selection-input-->
                <div
                    class="playground__inputs__selection-input playground__tab"
                >
                    <text-input
                        declaration="selection"
                        description="selectionInput1Description"
                        labels="[['C', 'LC'], ['D', 'LD'], ['A', 'LA'], ['B', 'LB']]"
                        name="selectionInput1"
                        required
                        selection="['A', 'B', 'C']"
                    ></text-input>
                    <text-input
                        initial-value="'A'"
                        labels="['Label A', 'Label B', 'Label C']"
                        model="{
                            declaration: 'selection',
                            description: 'selectionInput1ModelDescription',
                            mutable: false,
                            name: 'selectionInput1Model',
                            nullable: false,
                            selection: ['A', 'B', 'C']
                        }"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="selection"
                        description="selectionInput2Description"
                        initial-value
                        name="selectionInput2"
                        placeholder="selectionInput2Placeholder"
                        type="boolean"
                        required
                    ></text-input>
                    <text-input
                        initial-value="false"
                        labels="{true: 'JA', false: 'NEIN'}"
                        model="{
                            declaration: 'selection',
                            description: 'selectionInput2ModelDescription',
                            name: 'selectionInput2Model',
                            nullable: false,
                            type: 'boolean'
                        }"
                        placeholder="selectionInput2ModelPlaceholder"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="selection"
                        description="selectionInput30Description"
                        initial-value
                        labels="{true: 'JA', false: 'NEIN'}"
                        name="selectionInput3"
                        required
                    ></text-input>
                    <text-input
                        initial-value="false"
                        labels="{true: 'JA', false: 'NEIN'}"
                        model="{
                            declaration: 'selection',
                            description: 'selectionInput3ModelDescription',
                            name: 'selectionInput3Model',
                            nullable: false,
                            type: 'boolean'
                        }"
                    ></text-input>

                    <hr/>

                    <text-input
                        declaration="numberSelection"
                        description="selectionInput4Description"
                        selection="[1, 2, 3]"
                        name="selectionInput4"
                        required
                    ></text-input>
                    <text-nput
                        model="{
                            declaration: 'numberSelection',
                            description: 'selectionInput4ModelDescription',
                            name: 'selectionInput4Model',
                            selection: [1, 2, 3],
                            type: 'number'
                        }"
                    ></text-nput>

                    <hr/>

                    <text-input
                        declaration="selection"
                        description="selectionInput5Description"
                        initial-value="'b'"
                        name="selectionInput5"
                        selection="{a: 'A', b: 'B', c: 'C'}"
                        required
                    ></text-input>
                    <text-input
                        initial-value="'b'"
                        model="{
                            declaration: 'selection',
                            description: 'selectionInput5ModelDescription',
                            name: 'selectionInput5Model',
                            nullable: false,
                            selection: {a: 'A', b: 'B', c: 'C'}
                        }"
                    ></text-input>

                    <hr/>

                    <text-input
                        description="selectionInput6Description"
                        name="selectionInput6"
                        placeholder="selectionInput6Placeholder"
                        suggest-selection
                        selection="['hans hans', 'peter peter', 'klaus']"
                    ></text-input>
                    <text-input
                        initial-value="'peter'"
                        model="{
                            declaration: 'selection',
                            description: 'selectionInput6ModelDescription',
                            name: 'selectionInput6Model',
                            nullable: false
                        }"
                        placeholder="selectionInput6ModelPlaceholder"
                        search-selection
                        -suggestion-creator="utility.debounce(function(search) {
                            if (!search.query || search.query.length < 3)
                                return []

                            return utility.timeout(2000).then(function() {
                                return [
                                    'hans with veeeeeeeeeeeeeeeery ' +
                                    'loooooooooooooooong second name',
                                    'peter',
                                    'klaus'
                                ].filter(function(name) {
                                    return (
                                        !search.query ||
                                        name.includes(search.query)
                                    )
                                })
                            })
                        })"
                    ></text-input>

                    <hr/>

                    <text-input
                        description="selectionInput7Description"
                        default="'a'"
                        name="selectionInput7"
                        placeholder="selectionInput7Placeholder"
                        search-selection
                        selection="{a: 'hans', b: 'hans', c: 'klaus'}"
                    ></text-input>
                    <text-input
                        initial-value="'peter'"
                        model="{
                            declaration: 'selection',
                            description: 'selectionInput7ModelDescription',
                            name: 'selectionInput7Model',
                            nullable: false
                        }"
                        placeholder="selectionInput7ModelPlaceholder"
                        suggestion-creator="new Promise(function(resolve) {
                            utility.timeout(500, function() {
                                var selection = {
                                    a: 'hans with veeeeeeeeeeeeeeeery ' +
                                       'loooooooooooooooong second name',
                                    b: 'peter',
                                    c: 'klaus'
                                }

                                var result = {}
                                for (var key in selection)
                                    if (
                                        !options.query ||
                                        selection[key].includes(options.query)
                                    )
                                        result[key] = selection[key]
                                resolve(result)
                            })
                        })"
                    ></text-input>
                </div>
                <!--endregion-->

                <!--region file-input-->
                <div class="playground__inputs__file-input playground__tab">
                    <file-input
                        name="fileInput1"
                        trigger-initial-properties-consolidation
                    ></file-input>
                    <file-input
                        default="{
                            blob: {type: 'image/png'},
                            url: 'https://via.placeholder.com/150'
                        }"

                        content-type-pattern="'^text/(?:plain|(?:x-)?csv|xml)$'"
                        model="{fileName: {
                            pattern: '^[a-zA-Z0-9]\\.(?:csv|txt|xml)$'
                        }}"

                        encoding="latin1"

                        name="fileInput2"

                        -generate-file-name-input-properties="function(prototype, properties) {
                            var fileName = properties.value.name || ''

                            return object.extend(
                                prototype,
                                {
                                    disabled: true,
                                    value:
                                        properties.name +
                                        (fileName.includes('.') ?
                                            fileName.substring(
                                                fileName.lastIndexOf('.')
                                            ) :
                                            ''
                                        )
                                }
                            )
                        }"
                    >
                        <div bind-attribute-style="
                            'margin-left: 10px' +
                             (options.value && options.value.blob ? '' : ' display: none')
                        ">
                            <span>
                                Expected encoding for text based files: latin1
                            </span>

                            <span bind-attribute-style="
                                options.value && options.value.blob &&
                                options.value.blob.lastModified ?
                                    '' :
                                    'display: none'
                            ">
                                <span bind-property-text-content="
                                    options.value && options.value.blob &&
                                    options.value.blob.lastModified ?
                                        (
                                            'Last modified date time: ' +
                                            datetime.dateTimeFormat(
                                                '${mediumDay}.${mediumMonth}.${fullYear}',
                                                new Date(options.value.blob.lastModified)
                                            )
                                        ) :
                                        ''
                                "></span>
                                <br />
                            </span>

                            <span bind-property-text-content="
                                options.value &&
                                options.value.blob && options.value.blob.type ?
                                    ('Mime-Typ: ' + options.value.blob.type) :
                                    ''
                            "></span>
                            <br />

                            <span bind-property-text-content="
                                options.value &&
                                options.value.blob && options.value.blob.size ?
                                    ('Size: ' + options.value.blob.size) :
                                    ''
                            "></span>
                            <br />
                        </div>
                    </file-input>
                </div>
                <!--endregion-->

                <!--region generic-inputs-->
                <div class="playground__inputs__generic-inputs playground__tab">
                    <!--region generic-inputs file-->
                    <generic-inputs
                        name="fileInputs"
                        create-item="object.extend(
                            options.item,
                            {name: options.properties.name + '-' + String(options.index + 1)}
                        )"
                        maximum-number="10"
                        model="{default: [{name: 'inputs1-1'}], name: 'inputs1'}"
                        show-initial-validation-state
                    >
                        <file-input bind-properties="options.properties">
                        </file-input>
                    </generic-inputs>
                    <!--endregion-->
                    <!--region generic-inputs checkbox-->
                    <generic-inputs
                        create-item="object.extend(
                            options.item,
                            {name: options.properties.name + '-' + String(options.index + 1)}
                        )"
                        maximum-number="2"
                        minimum-number="2"
                        model="{
                            default: [{type: 'boolean', value: false}],
                            name: 'checkboxInputs'
                        }"
                        show-initial-validation-state
                    >
                        <requireable-checkbox
                            bind-properties="options.properties"
                        ></requireable-checkbox>
                    </generic-inputs>
                    <!--endregion-->
                    <!--region generic-inputs interval-->
                    <generic-inputs
                        -create-prototype="function({item, lastValue, properties}) {
                            const sixHoursInSeconds =
                                new Date(1970, 0, 1, 6).getTime() / 1000
                            const length = properties?.value?.length
                            const nextStart =
                                lastValue?.end ??
                                (
                                    (
                                        length &&
                                        properties.value[length - 1].value
                                    ) ?
                                        properties.value[length - 1].value.end :
                                        sixHoursInSeconds
                                )
                            const nextStartTime = nextStart.value ?? nextStart
                            const nextStartTimeInSeconds =
                                typeof nextStartTime === 'number' ?
                                    nextStartTime :
                                    new Date(nextStartTime).getTime() / 1000

                            const value = {
                                start: {value: nextStartTimeInSeconds},
                                end: {
                                    value: nextStartTimeInSeconds + 60 ** 2
                                }
                            }

                            /*
                                NOTE: We need to use 'model' since it would be
                                overwritten by default values otherwise.
                            */
                            return object.extend(true, item, {model: {value}})
                        }"
                        model="{
                            default: [
                                {value: {
                                    start: '1970-01-01T07:00:00.000Z',
                                    end: '1970-01-01T11:30:00.000Z'
                                }},
                                {value: {
                                    start: '1970-01-01T12:00:00.000Z',
                                    end: '1970-01-01T18:00:00.000Z'
                                }}
                            ],
                            name: 'intervalInputs1'
                        }"
                        show-initial-validation-state
                    >
                        <generic-interval
                            bind-properties="options.properties" step="60"
                        ></generic-interval>
                    </generic-inputs>

                    <generic-inputs
                        -create-prototype="function({item, lastValue, properties}) {
                            const sixHoursInSeconds =
                                new Date(1970, 0, 1, 6).getTime() / 1000
                            const length = properties?.value?.length
                            const nextStart =
                                lastValue?.end ??
                                (
                                    (
                                        length &&
                                        properties.value[length - 1].value
                                    ) ?
                                        properties.value[length - 1].value.end :
                                        sixHoursInSeconds
                                )
                            const nextStartTime = nextStart.value ?? nextStart
                            const nextStartTimeInSeconds =
                                typeof nextStartTime === 'number' ?
                                    nextStartTime :
                                    new Date(nextStartTime).getTime() / 1000

                            const value = {
                                start: {value: nextStartTimeInSeconds},
                                end: {
                                    value: nextStartTimeInSeconds + 60 ** 2
                                }
                            }

                            /*
                                NOTE: We need to use 'model' since it would be
                                overwritten by default values otherwise.
                            */
                            return object.extend(true, item, {model: {value}})
                        }"
                        model="{default: [
                            {model: {value: {
                                start: {
                                    declaration: 'Please enter start time here.',
                                    value: '1970-01-01T07:00:00.000Z'
                                },
                                end: {
                                    declaration: 'Please enter end time here.',
                                    value: '1970-01-01T11:30:00.000Z'
                                }
                            }}},
                            {model: {value: {
                                start: {
                                    declaration: 'Please enter start time here.',
                                    value: '1970-01-01T12:00:00.000Z'
                                },
                                end: {
                                    declaration: 'Please enter end time here.',
                                    value: '1970-01-01T18:00:00.000Z'
                                }
                            }}}
                        ]}"
                        name="intervalInputs2"
                        show-initial-validation-state
                    >
                        <generic-interval bind-properties="object.extend(
                            true,
                            options.properties,
                            {
                                value: {
                                    start: {type: 'time-local'},
                                    end: {type: 'time-local'}
                                },
                                step: 60
                            }
                        )"></generic-interval>
                    </generic-inputs>
                    <!--endregion-->
                    <generic-inputs
                        name="textInputInputs"
                        trigger-initial-properties-consolidation
                        value="['first item']"
                    ></generic-inputs>
                </div>
                <!--endregion-->
                <!--region generic-interval-->
                <div class="playground__inputs__generic-interval playground__tab">
                    <generic-interval
                        name="intervalInput1"
                        required
                        step="60"
                        value="{
                            start: {default: 120, maximum: 3600},
                            end: {default: 240, minimum: 120}
                        }"
                    ></generic-interval>
                    <generic-interval
                        name="intervalInput2"
                        required
                        step="60"
                        value="{
                            start: {
                                default: '1970-01-01T00:02:00.000Z',
                                maximum: '1970-01-01T01:00:00.000Z',
                                type: 'time-local'
                            },
                            end: {
                                default: '1970-01-01T00:04:00.000Z',
                                minimum: '1970-01-01T00:02:00.000Z',
                                type: 'time-local'
                            }
                        }"
                    ></generic-interval>

                    <generic-interval
                        name="intervalInput3"
                        default="120"
                        required
                        step="60"
                        trigger-initial-properties-consolidation
                        value="{
                            start: {default: 120, maximum: 3600},
                            end: {default: 240, minimum: 120}
                        }"
                    ></generic-interval>
                    <generic-interval
                        name="intervalInput4"
                        default="120"
                        required
                        step="60"
                        trigger-initial-properties-consolidation
                        value="{start: {default: 120}, end: {default: 240}}"
                    ></generic-interval>
                </div>
                <!--endregion-->

                <!--region requireable-checkbox-->
                <div class="playground__inputs__requireable-checkbox playground__tab">
                    <requireable-checkbox
                        name="checkbox1"
                        trigger-initial-properties-consolidation
                    ></requireable-checkbox>

                    <hr/>

                    <requireable-checkbox name="checkbox2"></requireable-checkbox>
                    <requireable-checkbox
                        model="{name: 'checkbox2Model'}"
                        theme-configuration="{primary: 'yellow', secondary: 'blue'}"
                    ></requireable-checkbox>

                    <hr/>

                    <requireable-checkbox
                        default disabled name="checkbox3" required
                    ></requireable-checkbox>
                    <requireable-checkbox
                        model="{
                            name: 'checkbox3Model',
                            mutable: false,
                            nullable: false
                        }"
                    ></requireable-checkbox>

                    <hr/>

                    <requireable-checkbox
                        description="checkbox4Description"
                        name="checkbox4"
                        required
                        show-initial-validation-state
                    ></requireable-checkbox>
                    <requireable-checkbox
                        model="{
                            default: true,
                            description: 'checkbox4ModelDescription',
                            name: 'checkbox4Model',
                            nullable: false
                        }"
                        show-initial-validation-state
                        tooltip="'Check this one!'"
                    ></requireable-checkbox>
                </div>
                <!--endregion-->

                <!--region generic-animate-->
                <div
                        class="playground__inputs__generic-animate playground__tab"
                        style="height: 50px"
                >
                    <generic-animate in timeout="2000">
                        Fade it!
                    </generic-animate>
                    <br/>
                    <generic-animate in="false" timeout="2000">
                        Fade it!
                    </generic-animate>
                </div>
                <!--endregion-->

                <!--region circular-spinner-->
                <div class="playground__inputs__circular-spinner playground__tab">
                    <circular-spinner></circular-spinner>
                    <circular-spinner size="'xlarge'" theme="error">
                    </circular-spinner>
                    <circular-spinner size="80"></circular-spinner>
                </div>
                <!--endregion-->

                <!--region slider-input-->
                <div class="playground__inputs__slider-input playground__tab">
                    <slider-input name="sliderInput1" value="0"></slider-input>
                    <slider-input
                        name="sliderInput2"

                        max="100"
                        min="10"
                        step="2"
                        value="12"
                    ></slider-input>
                    <slider-input
                        name="sliderInput3"

                        discrete

                        max="100"
                        min="10"
                        step="2"
                        value="66"
                    ></slider-input>
                    <slider-input
                        name="sliderInput4"

                        discrete
                        display-markers

                        max="100"
                        min="10"
                        step="2"
                        value="32"
                    ></slider-input>
                    <slider-input disabled name="sliderInput5" value="33">
                    </slider-input>
                </div>
                <!--endregion-->
            </div>

            <div class="playground__outputs">
                <!--
                    Add one version as a hidden spacer and one fixed version
                    visible apart from current scroll position.
                -->
                <pre class="playground__outputs__bar"></pre>
                <pre class="playground__outputs__content"></pre>
            </div>
        </div>
    </body>
<html>
